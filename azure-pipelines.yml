trigger:
- master

pr:
  autoCancel: true
  branches:
    include:
      - '*'

pool: 
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'
  azureSubscription: 'Azure'
  resourceGroup: 'Web.WestEurope'
  appName: 'aitopenspace'

  npm_config_cache: $(Pipeline.Workspace)/.npm
  nuget_packages: $(Pipeline.Workspace)/.nuget/packages

stages:
  - stage: Build
    jobs:
      - job: Build
        steps:

        # Restore npm packages
        - task: Cache@2
          inputs:
            key: npm | $(Agent.OS) | package-lock.json
            path: $(npm_config_cache)
          displayName: Cache npm
        - script: npm ci
          workingDirectory: Web

        # Restore nuget packages                
        - task: Cache@2
          inputs:
            key: 'nuget | "$(Agent.OS)" | packages.lock.json'
            restoreKeys: |
              nuget | "$(Agent.OS)"
              nuget
            path: $(nuget_packages)
          displayName: Cache NuGet packages
        - script: dotnet tool restore
        - script: dotnet paket restore
        
        # Build frontend and backend
        - script: dotnet build openspace.sln --configuration $(buildConfiguration)
        - script: npm run publish
          workingDirectory: Web
        
        # Publish app
        - script: dotnet publish Web.csproj --configuration $(buildConfiguration) --output $(build.artifactstagingdirectory)
          workingDirectory: Web
        - publish: $(build.artifactstagingdirectory)
          artifact: WebApp
  
  - stage: Staging  
    jobs:
      - deployment: Staging
        displayName: Deploy Web App
        pool: 
          vmImage: 'ubuntu-latest'
        environment: 'openspaceplanner-staging'
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: WebApp
                - task: AzureRmWebAppDeployment@3
                  displayName: 'Azure App Service Deploy: aitopenspace'
                  inputs:
                    azureSubscription: $(azureSubscription)
                    WebAppName: $(appName)
                    DeployToSlotFlag: true
                    ResourceGroupName: $(resourceGroup)
                    SlotName: Staging
                    TakeAppOfflineFlag: true
                    UseWebDeploy: true
                    Package: $(Pipeline.Workspace)/WebApp/**/*.zip

  - stage: Production
    jobs:
      - deployment: Production
        displayName: Deploy Web App
        pool: 
          vmImage: 'ubuntu-latest'
        environment: 'openspaceplanner-production'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureAppServiceManage@0
                  displayName: 'Swap Slots: aitopenspace'
                  inputs:
                    azureSubscription: $(azureSubscription)
                    WebAppName: $(appName)
                    ResourceGroupName: $(resourceGroup)
                    SourceSlot: Staging
